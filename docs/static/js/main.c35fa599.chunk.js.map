{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","components/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","length","category","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAoCeA,EAjCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEnB,EAAsCC,mBAAS,IAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAgBA,OACI,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAGCJ,EAAWK,OAAS,IACnBP,GAAc,SAAAQ,GAAQ,OAAKN,GAAL,mBAAoBM,OAC1CL,EAAc,MAKlB,SACI,uBACIM,KAAK,OACLC,MAAOR,EACPS,SAnBa,SAACN,GACtBF,EAAcE,EAAEO,OAAOF,a,QCGhBG,EATK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAC9B,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNVK,EAAO,uCAAG,WAAOZ,GAAP,uBAAAa,EAAA,6DACNL,EADM,iDAC0CM,UAAUd,GADpD,+DAEOe,MAAMP,GAFb,cAENQ,EAFM,gBAGWA,EAAKC,OAHhB,uBAGJC,EAHI,EAGJA,KAEFC,EAAQD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHf,GAAIe,EAAIf,GACRC,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIC,cAAN,aAAE,EAAYC,iBAAiBf,QAT9B,kBAYLW,GAZK,4CAAH,sDAeEP,ICcAY,EAzBC,SAAC,GAAkB,IAAhBxB,EAAe,EAAfA,SAEf,ECHwB,SAACA,GACzB,MAA0BP,mBAAS,CAC/ByB,KAAM,GACNO,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OATAC,qBAAU,WACNhB,EAAQZ,GAAU6B,MAAK,SAAAC,GACnBH,EAAS,CACLT,KAAMY,EACNL,SAAS,SAGlB,CAACzB,IAEG0B,EDZ0BK,CAAa/B,GAAjCsB,EAAb,EAAQJ,KAAaO,EAArB,EAAqBA,QAGrB,OACI,qCACI,oBAAIhB,UAAU,oCAAd,SAAoDT,IAEnDyB,GAAW,mBAAGhB,UAAU,mCAAb,wBAEZ,qBAAKA,UAAU,aAAf,SAEYa,EAAOF,KAAI,SAAAY,GACP,OAAO,cAAC,EAAD,eAESA,GADCA,EAAM1B,aESpC2B,EAxBM,WACjB,MAAoCxC,mBAAS,CAAC,cAA9C,mBAAOyC,EAAP,KAAmB1C,EAAnB,KAEA,OACI,qCACI,8CAEA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEQ0C,EAAWd,KAAI,SAAApB,GAAQ,OACnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCZjCmC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.c35fa599.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [ inputValue, setInputValue ] = useState('');\n\n    const handleInputValue = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        //setCategories([...categories, inputValue]);\n        \n        if(inputValue.length > 0) {\n            setCategories(category => [inputValue, ...category]);\n            setInputValue('');\n        }\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={ handleInputValue }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","import React from 'react';\n\nconst GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className='card animate__animated animate__fadeIn'>\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    );\n}\n\nexport default GifGridItem;\n","const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=yOBfAXkn2px2wh6nPz9Xinc3S60TFhWh`;\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs =  data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}\n\nexport default getGifs;","import React from 'react';\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from './useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n\n    const { data:images, loading } = useFetchGifs(category);\n\n    \n    return (\n        <>\n            <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\n\n            {loading && <p className='animate__animated animate__flash'>Loading...</p>}\n\n            <div className='card-grid '>\n                    {\n                        images.map(image => {\n                            return <GifGridItem \n                                        key={image.id}\n                                        {...image}\n                                    />\n                        })\n                    }                \n            </div>\n        </>\n    );\n}\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport getGifs from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category).then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        })\n    }, [category]);\n\n    return state;\n}\n","import React, {useState} from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState(['One Punch']);\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n\n            <AddCategory setCategories={ setCategories } />\n            <hr/> \n\n            <ol>\n                {\n                    categories.map(category => (\n                        <GifGrid\n                            key={category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}